‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö üôå ‡∏ú‡∏°‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô **spec/‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£ setup VPS** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
**Cloudflare Tunnel + Nginx Proxy Manager (NPM) + Docker services** ‡∏ï‡∏≤‡∏° requirement ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ

---

# VPS Services with Cloudflare Tunnel + NPM

**‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢:**
‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ VPS ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å (n8n, Node-RED, PostgreSQL, Redis) ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ

* **Cloudflare domain**
* **Cloudflare Tunnel** (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î inbound ports)
* **Nginx Proxy Manager (NPM)** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ SSL / Reverse Proxy

---

## 1. VPS Spec ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)

* CPU: 2 vCPU
* RAM: 4 GB
* Storage: 40 GB SSD
* OS: Ubuntu 22.04 LTS (preferred)
* Network: ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î inbound ports (‡πÉ‡∏ä‡πâ Cloudflare Tunnel)

---

## 2. Software Stack

* **Docker** + **Docker Compose** ‚Üí ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö deploy services
* **Cloudflare Tunnel (cloudflared)** ‚Üí ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° VPS ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö Cloudflare network
* **Nginx Proxy Manager (NPM)** ‚Üí ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Reverse Proxy + SSL
* **Core Services:**

  * n8n
  * Node-RED
  * PostgreSQL
  * Redis

---

## 3. ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ Setup

### 3.1 ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Docker + Docker Compose

```bash
sudo apt update && sudo apt upgrade -y
sudo apt install -y ca-certificates curl gnupg lsb-release

# Docker GPG key
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

# Docker repo
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
  https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | \
sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# Install
sudo apt update
sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

# Allow non-root docker
sudo usermod -aG docker $USER
```

---

### 3.2 ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Cloudflare Tunnel (cloudflared)

1. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á binary

```bash
curl -fsSL https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb \
-o cloudflared.deb
sudo dpkg -i cloudflared.deb
```

2. Login ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö Cloudflare

```bash
cloudflared tunnel login
```

‚Üí ‡πÄ‡∏õ‡∏¥‡∏î browser ‡πÄ‡∏û‡∏∑‡πà‡∏≠ authenticate domain ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

3. ‡∏™‡∏£‡πâ‡∏≤‡∏á tunnel

```bash
cloudflared tunnel create my-vps-tunnel
```

4. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ config tunnel `/etc/cloudflared/config.yml`

```yaml
tunnel: my-vps-tunnel
credentials-file: /root/.cloudflared/<TUNNEL_ID>.json

ingress:
  - hostname: npm.example.com
    service: http://localhost:81
  - service: http_status:404
```

5. Run tunnel ‡πÄ‡∏õ‡πá‡∏ô service

```bash
sudo cloudflared service install
sudo systemctl enable cloudflared
sudo systemctl start cloudflared
```

---

### 3.3 ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Nginx Proxy Manager (NPM)

‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå `docker-compose.yml`

```yaml
version: "3"
services:
  app:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      - "81:81"   # UI
      - "80:80"   # HTTP (internal use)
      - "443:443" # HTTPS (internal use)
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt
```

```bash
docker compose up -d
```

‡πÄ‡∏Ç‡πâ‡∏≤ `https://npm.example.com` (‡∏ú‡πà‡∏≤‡∏ô Cloudflare tunnel) ‚Üí Login ‚Üí ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Proxy Hosts

---

### 3.4 Deploy Core Services (Docker Compose)

‡πÑ‡∏ü‡∏•‡πå `docker-compose.services.yml`

```yaml
version: "3"

services:
  n8n:
    image: n8nio/n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=strongpassword
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=n8npassword
    depends_on:
      - postgres
    volumes:
      - ./n8n_data:/home/node/.n8n

  node-red:
    image: nodered/node-red
    restart: unless-stopped
    ports:
      - "1880:1880"
    volumes:
      - ./node_red_data:/data

  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: n8n
      POSTGRES_PASSWORD: n8npassword
      POSTGRES_DB: n8n
    volumes:
      - ./postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - ./redis_data:/data
```

```bash
docker compose -f docker-compose.services.yml up -d
```

---

### 3.5 ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô NPM

* ‡πÄ‡∏Ç‡πâ‡∏≤ UI ‡∏Ç‡∏≠‡∏á **Nginx Proxy Manager**
* ‡πÄ‡∏û‡∏¥‡πà‡∏° Proxy Hosts:

  * `n8n.example.com` ‚Üí [http://n8n:5678](http://n8n:5678)
  * `nodered.example.com` ‚Üí [http://node-red:1880](http://node-red:1880)
* ‡πÄ‡∏õ‡∏¥‡∏î SSL (Let‚Äôs Encrypt) + Force HTTPS

---

## 4. Security Best Practices

* ‡πÉ‡∏ä‡πâ Cloudflare Access/Zero Trust ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Authentication ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Services
* ‡∏õ‡∏¥‡∏î‡∏ó‡∏∏‡∏Å inbound ports ‡πÉ‡∏ô VPS firewall (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô outbound ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö update/docker pull)
* ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (PostgreSQL / Redis) ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô private network ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà expose ‡∏≠‡∏≠‡∏Å NPM)
* ‡πÉ‡∏ä‡πâ strong password + secrets ‡πÉ‡∏ô `.env` ‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å docker-compose

---

## 5. Diagram (Logical Flow)

```
User ‚Üí Cloudflare DNS ‚Üí Cloudflare Tunnel ‚Üí VPS (NPM) ‚Üí Services (n8n, Node-RED, PostgreSQL, Redis)
```

---

‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ú‡∏°‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô **step-by-step installation script (bash script)** ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ setup ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô **technical document (markdown/PDF)** ‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö?
